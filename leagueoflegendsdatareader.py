# -*- coding: utf-8 -*-
"""LeagueofLegendsDatareader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDSLmwRmbaTzz5VtOowfHV1KiX9dj-LR
"""

!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches1.json

import matplotlib.pyplot as plot

import pandas as pd
import numpy as np

df = pd.read_json('matches1.json')['matches'].apply(pd.Series)
df.head()

!ls



!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches2.json

!wget https://raw.githubusercontent.com/ngryman/lol-champions/master/champions.json

!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches3.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches4.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches5.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches6.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches7.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches8.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches9.json
!wget https://s3-us-west-1.amazonaws.com/riot-developer-portal/seed-data/matches10.json

matchesg = pd.read_json('matches2.json')['matches'].apply(pd.Series)
matchesg.head()

matchesa = matchesg['gameId'].apply(pd.Series)
matchesa.head(20)

def find_champ(list_participants):
    return [participant['championId'] for participant in list_participants]
      
df['participants'].apply(find_champ)

data_merged = matchesg.merge(right=df, how='inner',on='gameCreation',right_index=True, sort=False)

matchesb = pd.read_json('matches1.json', 'matches2.json')['matches'].apply(pd.Series)

matchesg = pd.read_json('matches2.json')['matches'].apply(pd.Series)

matchesc = pd.read_json('matches3.json')['matches'].apply(pd.Series)

matchesh = pd.read_json('matches4.json')['matches'].apply(pd.Series)

matchesd = pd.read_json('matches5.json')['matches'].apply(pd.Series)

matchesi = pd.read_json('matches6.json')['matches'].apply(pd.Series)

matchese = pd.read_json('matches7.json')['matches'].apply(pd.Series)

matchesj = pd.read_json('matches8.json')['matches'].apply(pd.Series)

matchesf = pd.read_json('matches9.json')['matches'].apply(pd.Series)

matchesl = pd.read_json('matches10.json')['matches'].apply(pd.Series)

df_complet = pd.concat([matchesb, matchesc, matchesd, matchese, matchesf, matchesg, matchesh, matchesi, matchesj, matchesl])

df_complet.head()



df_complet.shape

champions = pd.read_json('champions.json')['id'].apply(pd.Series)
champions.head()

champions1 = pd.read_json('champions.json')['key'].apply(pd.Series)
champions1.head

champions1.columns = ['Id']
champions1.head

champions.columns = ['Nome']
champions.head

championcompleto= champions.join(champions1, on=None, how='left', sort=False)
championcompleto



championcompleto.set_index('Id').T.to_dict('list')



def find_champ(list_participants):
    return [participant['championId'] for participant in list_participants]
      
dfchamps = df_complet['participants'].apply(find_champ)
dfchamps.columns = ['Campeões']

def find_champ(list_participants):
    return [participant['championId'] for participant in list_participants]
      
dfchamps = df_complet['participants'].apply(find_champ)
dfchamps.columns = ['Campeões']

dfteam = df_complet.teams
df00 = dfteam.apply(pd.Series)

dfteam

pd.set_option('display.max_colwidth', -1)
pd.set_option('display.max_row', 290)
pd.set_option('display.max_columns', 290)

df002 = df00[0]

df001 = df00[1]

dfblue = df002.apply(pd.Series)

dfred = df001.apply(pd.Series)

dfchamps1 = dfchamps.apply(pd.Series)

dfchamps1.columns = ['player1', 'player2', 'player3', 'player4', 'player5', 'player6', 'player7', 'player8', 'player9', 'player10']

champblue = dfchamps1[['player1', 'player2', 'player3', 'player4', 'player5']]

champblue

champred = dfchamps1[['player6', 'player7', 'player8', 'player9', 'player10']]

dfblue

dfred

champred

champred2 = champred[['player6', 'player7', 'player8', 'player9', 'player10']].replace(championcompleto.set_index('Id').T.to_dict('list'))

champblue2 = champblue[['player1', 'player2', 'player3', 'player4', 'player5']].replace(championcompleto.set_index('Id').T.to_dict('list'))

champred2

champblue2

dfb = dfblue.join(champblue2, on=None, how='left', sort=False)

dfb

dfr = dfred.join(champred2, on=None,how='left', sort=False)

dfr

dfr.insert(0, 'Games', range(0, 0 + len(dfr)))

dfb.insert(0, 'Games', range(0, 0 + len(dfb)))

dfr['Games'] = 'Game' + dfr['Games'].astype(str)

dfb['Games'] = 'Game' + dfb['Games'].astype(str)

dfr

dfb



ganhou = dfr['win'] == 'Win'
dfrw = dfr[ganhou]
dfrw['win'].value_counts()

dfr['win'].value_counts('Win')*100

dfb['win'].value_counts('Win')*100

dfbwin = dfb[['Games','win','player1', 'player2', 'player3', 'player4', 'player5']]
dfbwin

dfrwin = dfr[['Games','win','player6', 'player7', 'player8', 'player9', 'player10']]
dfrwin

dft= dfbwin.join(dfrwin, on=None, how='outer',lsuffix='Blue', rsuffix='Red', sort=False)
dff= dft

def winrateblue(champion):
  dfata = dff[champion == dff['player1']]
  dfatb = dff[champion == dff['player2']]
  dfatc = dff[champion == dff['player3']]
  dfatd = dff[champion == dff['player4']]
  dfate = dff[champion == dff['player5']]
  dfatz = pd.concat([dfata, dfatb, dfatc, dfatd, dfate])
  print(dfatz['winBlue'].value_counts('Win')* 100)

winrateblue('elise')

winrateblue('ahri')

dff

def winratered(champion):
  dfatf = dff[champion == dff['player6']]
  dfatg = dff[champion == dff['player7']]
  dfath = dff[champion == dff['player8']]
  dfati = dff[champion == dff['player9']]
  dfatj = dff[champion == dff['player10']]
  dfatw =pd.concat([dfatf, dfatg, dfath, dfati, dfatj])
  print(dfatw['winRed'].value_counts('Win')* 100)

winratered('ahri')

winratered('elise')

winratered('leesin')

aa = dfr['firstBlood'] == True
df11 = dfr[aa]
df11['win'].value_counts('Win')*100

ab = dfr['firstBaron'] == True
df12 = dfr[ab]
df12['win'].value_counts('Win')*100

ab = dfr['firstDragon'] == True
df12 = dfr[ab]
df12['win'].value_counts('Win')*100

ab = dfr['firstInhibitor'] == True
df12 = dfr[ab]
df12['win'].value_counts('Win')*100

